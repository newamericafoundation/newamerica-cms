.hero-grid {
	$max-header-width: $max-body-width + 75px;

	@mixin unfold() {
		@media screen and (min-width: 700px) {
			@content;
		}
	}

	@mixin unfold-1-children {
		@media screen and (min-width: 600px) {
			@content;
		}
	}

	@mixin unfold-2-children {
		@media screen and (min-width: 700px) {
			@content;
		}
	}

	@mixin unfold-3-children {
		@media screen and (min-width: 800px) {
			@content;
		}
	}

	@mixin unfold-4-children {
		@media screen and (min-width: 900px) {
			@content;
		}
	}

	$height: 450px;

	$local-gutter: $thick-border-width;

	// Adjustment made to the widths of the main and secondary grid columns so it lines up with regular grid.
	// Works only for two children.

	$gutter-adjust: 0px;

	@include clearfix;

	&__main, &__secondary, &__thirds {
		float: left;
		width: 100%;
	}

	&__main {
		@include set-color(background-color);
		height: $height / 2;
		margin-bottom: $local-gutter;

		.hero-grid.has-1-children & {
			@include unfold-1-children {
				margin-bottom: 0;
				height: $height;
				width: 100%;
			}
		}

		.hero-grid.has-2-children & {
			@include unfold-2-children {
				margin-bottom: 0;
				height: $height;
				width: 50%;
			}
		}

		.hero-grid.has-3-children & {
			@include unfold-3-children {
				margin-bottom: 0;
				height: $height;
				width: calc(#{100% * 2 / 3} + #{$gutter-adjust});
			}
		}

		.hero-grid.has-4-children & {
			@include unfold-4-children {
				margin-bottom: 0;
				height: $height;
				width: calc(#{100% * 1 / 2} - #{$gutter-adjust});
			}
		}

	}

	&__secondary {
		height: $height;
		.hero-grid.has-2-children & {
			height: $height / 2;
		}
		.hero-grid.has-4-children & {
			height: 1.5 * $height;
		}
		.hero-grid.has-2-children & {
			@include unfold-2-children {
				height: $height;
				width: 50%;
				.hero-grid__element__text-bar {
					max-height: 425px;
				}
			}
		}
		.hero-grid.has-3-children & {
			@include unfold-3-children {
				width: calc(#{100% * 1 / 3} - #{$gutter-adjust});
				.hero-grid__element__text-bar {
					max-height: 200px;
				}
			}
		}
		.hero-grid.has-4-children & {
			@include unfold-4-children {
				height: $height;
				width: calc(#{100% * 1 / 2} - #{$gutter-adjust});

				.hero-grid__element__text-bar {
					max-height: 200px;
				}
			}
		}
	}

	&__element {
		height: 100%;
		width: 100%;
		float: left;

		cursor: pointer;

		position: relative;

		.hero-grid__main & {
			height: $height / 2;
			.hero-grid.has-1-children & {
				@include unfold-1-children {
					height: $height;
					padding-right: $local-gutter / 2;
				}
			}
			.hero-grid.has-2-children & {
				@include unfold-2-children {
					height: $height;
					padding-right: $local-gutter / 2;
				}
			}
			.hero-grid.has-3-children & {
				@include unfold-3-children {
					height: $height;
					padding-right: $local-gutter;
				}
			}
			.hero-grid.has-4-children & {
				@include unfold-4-children {
					height: $height;
					padding-right: $local-gutter;
				}
			}
		}

		.hero-grid__secondary & {

			height: $height / 2;

			.hero-grid.has-2-children & {
				height: $height / 2;
				@include unfold-2-children {
					height: $height;
					padding-left: $local-gutter / 2;
				}
			}

			.hero-grid.has-3-children & {
				@include unfold-3-children {
					padding-left: $local-gutter / 2;
				}

				&:nth-of-type(1) {
					padding-bottom: $local-gutter / 2;
					@include unfold-3-children {
						padding-bottom: $local-gutter / 4;
					}
				}
				&:nth-of-type(2) {
					padding-top: $local-gutter / 2;
					@include unfold-3-children {
						padding-top: $local-gutter / 4;
					}
				}
			}

			.hero-grid.has-4-children & {
				@include unfold-4-children {
					padding-left: $local-gutter / 2;
				}
				&:nth-of-type(1) {
					padding-bottom: $local-gutter / 2;
					@include unfold-4-children {
						padding-bottom: $local-gutter / 4;
					}
				}
				&:nth-of-type(2), &:nth-of-type(3) {
					width: 100%;
					padding-top: $local-gutter / 2;
					@include unfold-4-children {
						width: 50%;
					}

				}
				&:nth-of-type(2) {
					padding-bottom: $local-gutter / 2;
					@include unfold-4-children {
						padding-bottom: 0;
						padding-right: $local-gutter / 4;
						padding-top: $local-gutter / 4;
					}
				}
				&:nth-of-type(3) {
					@include unfold-4-children {
						padding-left: $local-gutter / 4;
						padding-top: $local-gutter / 4;
					}
				}
			}

		}

		.hero-grid__thirds & {

			height: $height / 2;
			width: 100%;

			padding: $local-gutter/2 0;

			@include unfold() {
				width: 33.333333333%;

				&:nth-of-type(3n+1) {
					padding-right: $local-gutter / 2;
				}

				&:nth-of-type(3n+2) {
					padding-left: $local-gutter / 2;
					padding-right: $local-gutter / 2;
				}

				&:nth-of-type(3n+3) {
					padding-left: $local-gutter / 2;
				}
			}

		}

		&__content {
			@include set-color(background-color);
			display: block;
			position: relative;
			width: 100%;
			height: 100%;
		}

		&__background, &__overlay, &__text-bar {
			position: absolute;
		}

		&__background, &__overlay {
			top: 0;
			bottom: 0;
			left: 0;
			right: 0;
		}

		&__background {
			z-index: 1;
			background-position: 50% 50%;
			background-blend-mode: luminosity;
			background-repeat: no-repeat;
			background-size: cover;
			opacity: 1;

		}

		&__background:before {
				background: -moz-linear-gradient(center top , rgba(255, 255, 255, 0) 0%, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 0.06) 16%, rgba(0, 0, 0, 0.4) 75%, rgba(0, 0, 0, 0.6) 100%) repeat scroll 0 0 rgba(0, 0, 0, 0);
				background: -webkit-linear-gradient(top , rgba(255, 255, 255, 0) 0%, rgba(0, 0, 0, 0) 1%, rgba(0, 0, 0, 0.06) 16%, rgba(0, 0, 0, 0.4) 75%, rgba(0, 0, 0, 0.6) 100%);
				background: linear-gradient(to bottom, rgba(255,255,255,0) 0%,rgba(0,0,0,0.01) 1%,rgba(0,0,0,0.6) 100%);
				bottom: 0;
				content: " ";
				display: block;
				height: 50%;
				left: 0;
				position: absolute;
				transition: all 300ms cubic-bezier(0.42, 0, 0.58, 1) 0s;
				width: 100%;
				opacity: 1;
				z-index: 1;
		}

		&__overlay {
			background-color: transparentize(palette-get(na-black), 0.8);
			background-blend-mode: multiply;
			z-index: 2;
		  	content: '';
		  	-webkit-transition: all ease-in 0.15s; -moz-transition: all ease-in .15s; -o-transition: all ease-in 0.15s; transition: all ease-in 0.15s;

		  	&:hover {
		  		background-color: transparentize(palette-get(na-black), 1);
		  		-webkit-transition: all ease-in 0.15s; -moz-transition: all ease-in .15s; -o-transition: all ease-in .15s; transition: all ease-in .15s;
		  	}
		}

		&__text-bar {
			width: 100%;
			z-index: 3;
			bottom: 0;
			padding: 15px 20px 0px 20px;
			margin-bottom: 15px;
			color: palette-get(na-white);
			pointer-events: none;
			overflow: hidden;
			max-height: 195px;
			@include handle-text-overflow;

			&__subheading, &__heading {
				color: palette-get(na-white);
				max-width: $max-header-width;
				&:hover {
					color: palette-get(na-white);
				}
			}

			&__program, &__excerpt {
				margin-bottom: 10px;
				max-width: $max-body-width;
			}

			&__date {
				margin-top: 7px;
				margin-bottom: 7px;
			}

			&__program {
				margin-bottom: 0px;
				& > a {
					color: white;
					font-weight: bold;
					font-size: 16px;
				}
			}

			&__heading {
				display: block;
				line-height: 108%;
				font-weight: bold;
				font-size: rem-calc(28);

				@include unfold-1-children {
				    .has-1-children > .hero-grid__main & {
				    	font-size: rem-calc(32);
				    }
				}

				@include unfold-2-children {
				    .has-2-children > .hero-grid__main & {
				    	font-size: rem-calc(32);
				    }
				    .has-2-children > .hero-grid__secondary & {
				    	font-size: rem-calc(32);
				    }
				}

				@include unfold-3-children {
				    .has-3-children > .hero-grid__main & {
				    	font-size: rem-calc(32);
				    }
				    .has-3-children > .hero-grid__secondary & {
				    	font-size: rem-calc(24);
				    }
				}

				@include unfold-4-children {
				    .has-4-children > .hero-grid__main & {
				    	font-size: rem-calc(32);
				    }
				    .has-4-children > .hero-grid__secondary & {
				    	font-size: rem-calc(24);
				    }
				}

				margin-bottom: 7px;
			}

			&__subheading {
				margin-bottom: 0;
				padding-top: 15px;
				padding-bottom: 10px;

				@include program-and-content-type-text;
				color: white;

				& > a {
					color: palette-get(na-white);
				}
			}

			&__button {
				z-index: 10;
				pointer-events: auto;
				display: block;
				width: 70px;
				padding-left: .75rem;
				padding-right: .75rem;
			}

			&__date, &__excerpt {
				font-size: 16px;
			}

			&__excerpt {
				line-height: 130%;
			}
		}


	}

}
