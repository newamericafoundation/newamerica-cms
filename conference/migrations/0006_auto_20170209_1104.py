# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2017-02-09 16:04
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('home', '0018_auto_20170209_1104'),
        ('conference', '0005_auto_20170113_1607'),
    ]

    operations = [
        migrations.AddField(
            model_name='conference',
            name='alternate_logo',
            field=models.ForeignKey(blank=True, help_text=b'This will replace the New America logo at the top of the introduction / cover image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='home.CustomImage', verbose_name=b'Alternate Logo'),
        ),
        migrations.AlterField(
            model_name='conference',
            name='partners',
            field=wagtail.fields.StreamField([(b'partner', wagtail.blocks.StructBlock([(b'name', wagtail.blocks.TextBlock()), (b'type', wagtail.blocks.ChoiceBlock(choices=[(b'no_type', b'None'), (b'premier_sponsor', b'Premier Sponsor'), (b'sponsor', b'Sponsor'), (b'media_partner', b'Media Partner'), (b'recognized_partner', b'Recognized Partner')])), (b'logo', wagtail.images.blocks.ImageChooserBlock(icon=b'image', required=False))]))], blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='conference',
            name='sessions',
            field=wagtail.fields.StreamField([(b'days', wagtail.blocks.StructBlock([(b'collapsible', wagtail.blocks.BooleanBlock(default=True, help_text=b'Allow schedule sessions to expand and collapse', required=False)), (b'day', wagtail.blocks.ChoiceBlock(choices=[(b'1', b'1'), (b'2', b'2'), (b'3', b'3'), (b'4', b'4'), (b'5', b'5'), (b'6', b'6')], default=1, help_text=b'What day of the conference is this session on?', required=False)), (b'start_time', wagtail.blocks.TimeBlock(required=False)), (b'end_time', wagtail.blocks.TimeBlock(required=False)), (b'sessions', wagtail.blocks.StreamBlock([(b'session', wagtail.blocks.StructBlock([(b'name', wagtail.blocks.TextBlock()), (b'session_type', wagtail.blocks.ChoiceBlock(choices=[(b'panel', b'Panel'), (b'lecture', b'Lecture'), (b'break', b'Break'), (b'meal', b'Meal'), (b'reception', b'Reception'), (b'registration', b'Registration')])), (b'description', wagtail.blocks.RichTextBlock(required=False)), (b'start_time', wagtail.blocks.TimeBlock(required=False)), (b'end_time', wagtail.blocks.TimeBlock(required=False)), (b'speakers', wagtail.blocks.StreamBlock([(b'speaker', wagtail.blocks.StructBlock([(b'name', wagtail.blocks.TextBlock(required=True)), (b'title', wagtail.blocks.TextBlock(required=False))]))])), (b'archived_video_link', wagtail.blocks.URLBlock(help_text=b'Enter youtube link after conference', required=False))]))]))]))], blank=True, null=True),
        ),
    ]
